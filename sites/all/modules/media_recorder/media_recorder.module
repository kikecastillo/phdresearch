<?php
/**
 * @file
 * Adds a media recorder widget and add form to the media module.
 */

/**
 * Implements hook_libraries_info().
 */
function media_recorder_libraries_info() {
  $libraries = array();

  $libraries['swfobject'] = array(
    'name' => 'SWFObject',
    'description' => 'SWFObject is an easy-to-use and standards-friendly method to embed Flash content, which utilizes one small JavaScript file.',
    'vendor url' => 'https://github.com/swfobject/swfobject',
    'download url' => 'https://github.com/swfobject/swfobject/zipball/master',
    'version arguments' => array(
      'file' => 'swfobject/swfobject.js',
      'pattern' => '@v([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'js' => array(
        'swfobject/swfobject.js' => array(
          'type' => 'file',
          'scope' => 'header',
          'group' => JS_LIBRARY,
        ),
      ),
    ),
  );
  $libraries['FlashWavRecorder'] = array(
    'name' => 'FlashWavRecorder',
    'description' => 'Simple flash file for recording audio and saving as a WAV.',
    'vendor url' => 'https://github.com/michalstocki/FlashWavRecorder',
    'download url' => 'https://github.com/michalstocki/FlashWavRecorder/zipball/master',
    'version' => '0.9.0',
    'dependencies' => array(
      'swfobject (>=2.2)',
    ),
    'files' => array(
      'js' => array(
        'html/js/recorder.js' => array(
          'type' => 'file',
          'scope' => 'header',
          'group' => JS_LIBRARY,
        ),
      ),
    ),
  );
  $libraries['Recorderjs'] = array(
    'name' => 'Recorderjs',
    'description' => 'A plugin for recording/exporting the output of Web Audio API nodes',
    'vendor url' => 'https://github.com/mattdiamond/Recorderjs',
    'download url' => 'https://github.com/mattdiamond/Recorderjs/zipball/master',
    'version' => '',
    'files' => array(
      'js' => array('dist/recorder.js'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function media_recorder_menu() {
  $items = array();

  $items['file/add/record'] = array(
    'title' => 'Record',
    'description' => 'Add recordings to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_add'),
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['media_recorder/record/file'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file.',
    'page callback' => 'media_recorder_record_file',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['media_recorder/record/stream/start'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file as a stream.',
    'page callback' => 'media_recorder_record_stream_start',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['media_recorder/record/stream/record'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file as a stream.',
    'page callback' => 'media_recorder_record_stream_record',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['media_recorder/record/stream/finish'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file as a stream.',
    'page callback' => 'media_recorder_record_stream_finish',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/mediarecorder'] = array(
    'title' => 'Media recorder',
    'description' => 'Configure the media recorder.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_admin_form'),
    'access arguments' => array('administer files'),
    'file' => 'includes/media_recorder.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function media_recorder_help($path, $arg) {
  switch ($path) {
    case 'admin/help#media_recorder':
      $output = file_get_contents(drupal_get_path('module', 'media_recorder') . '/README.txt');
      return nl2br($output);
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function media_recorder_theme($existing, $type, $theme, $path) {
  return array(
    'media_recorder' => array(
      'variables' => array(),
      'template' => 'media-recorder',
      'path' => drupal_get_path('module', 'media_recorder') . '/theme',
    ),
  );
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record_stream_start() {

  // Reset session.
  $_SESSION['media_recorder'] = array();

  // Create a new temporary file to save streamed data.
  try {
    $_SESSION['media_recorder']['tempnam'] = drupal_tempnam('temporary://', 'mediaRecorder_');
    if (!$_SESSION['media_recorder']['tempnam']) {
      throw new Exception("Unable to create temporary file.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Get file format.
  try {
    $_SESSION['media_recorder']['format'] = $_POST['format'];
    if (!$_SESSION['media_recorder']['format']) {
      throw new Exception("Unable to get file format.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record_stream_record() {

  // Validate that temp file was created.
  if (!isset($_SESSION['media_recorder']['tempnam']) || empty($_SESSION['media_recorder']['tempnam'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('Recording session not initiated.');
    return;
  }

  // Validate that blob sequence count was sent.
  if (!isset($_REQUEST['count']) || !is_numeric($_REQUEST['count'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('Stream sequence count invalid.');
    return;
  }

  // Validate that blob exists.
  if (!isset($_FILES['blob']['tmp_name']) || empty($_FILES['blob']['tmp_name'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('Stream invalid.');
    return;
  }

  // Get data from blob.
  try {
    $data = file_get_contents($_FILES['blob']['tmp_name']);
    if (!$data) {
      throw new Exception("Streaming data file is empty.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Open new temp file.
  try {
    $fp = fopen($_SESSION['media_recorder']['tempnam'] . $_REQUEST['count'], 'a');
    if (!$fp) {
      throw new Exception("Unable to open temporary file. Please check that your file permissions are set correctly.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Write blob to temp file.
  try {
    fwrite($fp, $data);
    fclose($fp);
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Send success response.
  drupal_json_output(array(
    'count' => $_REQUEST['count'],
    'blob' => $_FILES['blob'],
    'tempnam' => $_SESSION['media_recorder']['tempnam'] . $_REQUEST['count'],
  ));
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record_stream_finish() {

  // Validate that temp file was created.
  if (!isset($_SESSION['media_recorder']['tempnam']) || empty($_SESSION['media_recorder']['tempnam'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('No file found.');
    return;
  }

  // Validate that a upload location was sent.
  if (!isset($_POST['mediaRecorderUploadLocation']) || empty($_POST['mediaRecorderUploadLocation'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('Missing configuration.');
    return;
  }

  // Get all file chunks.
  try {
    $files = file_scan_directory('temporary://', '/' . file_uri_target($_SESSION['media_recorder']['tempnam']) . '[0-9]+$/');
    if (!$files) {
      throw new Exception("Unable to get recorded streams. Please check that your file permissions are set correctly.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Sort files in case they are out of order.
  $files = array_keys($files);
  natsort($files);

  // Open temp file.
  try {
    $fp = fopen($_SESSION['media_recorder']['tempnam'], 'a');
    if (!$fp) {
      throw new Exception("Unable to open temporary file. Please check that your file permissions are set correctly.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Iterate over file list and append to temp file.
  foreach ($files as $filename) {

    // Get data from file.
    try {
      $data = file_get_contents($filename);
      if (!$data) {
        throw new Exception("Streaming data file is empty.");
      }
    }
    catch (Exception $e) {
      header('HTTP/1.0 419 Custom Error');
      drupal_json_output($e->getMessage());
      return;
    }

    // Append data to temp file.
    try {
      fwrite($fp, $data);
    }
    catch (Exception $e) {
      header('HTTP/1.0 419 Custom Error');
      drupal_json_output($e->getMessage());
      return;
    }

    // Delete file chunk.
    try {
      unlink($filename);
    }
    catch (Exception $e) {
      header('HTTP/1.0 419 Custom Error');
      drupal_json_output($e->getMessage());
      return;
    }
  }

  // Close temp file.
  try {
    fclose($fp);
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Change the file name and save to upload location.
  try {
    if (file_prepare_directory($_POST['mediaRecorderUploadLocation'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $uri = $_SESSION['media_recorder']['tempnam'];
      $target = $_POST['mediaRecorderUploadLocation'] . '/' . uniqid('mediaRecorder_') . '.' . $_SESSION['media_recorder']['format'];
      file_unmanaged_move($uri, $target);
      $file = file_uri_to_object($target);
      $file->status = 0;
      file_save($file);
    }
    else {
      throw new Exception("Unable to save recording to directory.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Close session.
  unset($_SESSION['media_recorder']);

  // Return file information.
  drupal_json_output($file);
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record_file() {

  // Validate that temp file was created.
  if (!isset($_FILES['mediaRecorder']['tmp_name']) || empty($_FILES['mediaRecorder']['tmp_name'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('No file was sent.');
    return;
  }

  // Validate that a upload location was sent.
  if (!isset($_POST['mediaRecorderUploadLocation']) || empty($_POST['mediaRecorderUploadLocation'])) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output('Missing configuration.');
    return;
  }

  // Create a new temporary file to save data.
  try {
    $uri = drupal_tempnam('temporary://', 'mediaRecorder_');
    if (!$uri) {
      throw new Exception("Unable to create temporary file.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Get file data.
  try {
    $data = file_get_contents($_FILES['mediaRecorder']['tmp_name']);
    if (!$data) {
      throw new Exception("There was no data sent.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Open a new file.
  try {
    $fp = fopen($uri, 'a');
    if (!$fp) {
      throw new Exception("Unable to open temporary file. Please check that your file permissions are set correctly.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Write to file.
  if ($data && $fp) {
    try {
      fwrite($fp, $data);
      fclose($fp);
    }
    catch (Exception $e) {
      header('HTTP/1.0 419 Custom Error');
      drupal_json_output($e->getMessage());
      return;
    }
  }

  // Change the file name and save to upload location.
  try {
    if (file_prepare_directory($_POST['mediaRecorderUploadLocation'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $target = $_POST['mediaRecorderUploadLocation'] . '/' . uniqid('mediaRecorder_') . '.wav';
      file_unmanaged_move($uri, $target);
      $file = file_uri_to_object($target);
      $file->status = 0;
      file_save($file);
    }
    else {
      throw new Exception("Unable to save recording to directory.");
    }
  }
  catch (Exception $e) {
    header('HTTP/1.0 419 Custom Error');
    drupal_json_output($e->getMessage());
    return;
  }

  // Return file information.
  drupal_json_output($file);
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_recorder_media_browser_plugin_info() {
  $info = array();

  $info['media_recorder'] = array(
    'title' => t('Recorder'),
    'class' => 'MediaRecorderBrowser',
  );

  return $info;
}

/**
 * Implements hook_element_info().
 */
function media_recorder_element_info() {
  $types = array();

  $types['media_recorder'] = array(
    '#input' => TRUE,
    '#process' => array('media_recorder_element_process'),
    '#value_callback' => 'media_recorder_element_value',
    '#element_validate' => array('media_recorder_element_validate'),
    '#default_value' => NULL,
    '#extended' => TRUE,
    '#theme_wrappers' => array('form_element'),
    '#time_limit' => variable_get('media_recorder_time_limit', 300),
    '#constraints' => variable_get('media_recorder_constraints', array(
      'audio' => TRUE,
      'video' => TRUE,
      'video_resolution' => 320,
    )),
    '#upload_location' => 'public://' . variable_get('media_recorder_upload_directory', ''),
    '#upload_validators' => array(
      'file_validate_extensions' => array(variable_get('media_recorder_default_allowed_extensions', 'wav mp3 m4a ogg oga weba wma mov mp4 wmv m4v mpeg avi ogv webp webm')),
    ),
  );

  return $types;
}

/**
 * Process callback for the media_recorder form element.
 *
 * @see media_recorder_element_info()
 */
function media_recorder_element_process($element, &$form_state, $form) {
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
  $file = NULL;
  $id = uniqid('media-recorder-');

  // If the element as a default file, add the absolute url to the file.
  if (!empty($fid) && $file = file_load($fid)) {
    $file->url = file_create_url($file->uri);
  }

  // Tokenize upload_location if token is enabled.
  $element['#upload_location'] = module_exists('token') ? token_replace($element['#upload_location']) : $element['#upload_location'];

  // Specify a #tree element since we will have children elements.
  $element['#tree'] = TRUE;

  // Add the javascript based recorder, which will be shown only if the browser
  // supports the required features.
  $element['recorder'] = array(
    '#prefix' => '<div id="' . $id . '" class="media-recorder-wrapper" style="display: none;">',
    '#suffix' => '</div>',
    '#theme' => 'media_recorder',
  );

  // Add a fallback upload element for devices unable to use the recorder.
  $element['fallback'] = array(
    '#type' => 'managed_file',
    '#id' => $id . '-fallback',
    '#description' => t('Allowed extensions: @extensions', array('@extensions' => $element['#upload_validators']['file_validate_extensions'][0])),
    '#default_value' => $fid,
    '#upload_location' => $element['#upload_location'],
    '#upload_validators' => $element['#upload_validators'],
  );

  // Add a hidden fid field for storing the returned recorded file using ajax.
  $element['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
    '#attributes' => array('id' => array($id . '-fid')),
  );

  // Add javascript libraries.
  $element['#attached'] = array(
    'libraries_load' => array(
      array('swfobject'),
      array('FlashWavRecorder'),
      array('Recorderjs'),
    ),
    'js' => array(
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'media_recorder') . '/js/media-recorder-api.js',
        'scope' => 'footer',
      ),
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'media_recorder') . '/js/media-recorder-html5.js',
        'scope' => 'footer',
      ),
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'media_recorder') . '/js/media-recorder-flash.js',
        'scope' => 'footer',
      ),
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'media_recorder') . '/js/media-recorder.js',
        'scope' => 'footer',
      ),
      array(
        'type' => 'setting',
        'data' => array(
          'mediaRecorder' => array(
            'swfPath' => libraries_get_path('FlashWavRecorder'),
            'workerPath' => libraries_get_path('Recorderjs'),
            'elements' => array(
              array(
                'id' => $id,
                'conf' => array(
                  'time_limit' => $element['#time_limit'],
                  'constraints' => $element['#constraints'],
                  'file' => $file,
                  'upload_location' => $element['#upload_location'],
                ),
              ),
            ),
          ),
        ),
        'scope' => 'header',
      ),
    ),
  );

  // Add custom css if enabled.
  if (variable_get('media_recorder_css', TRUE)) {
    $element['#attached']['css'] = array(
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'media_recorder') . '/css/media-recorder.css',
      ),
    );
  }

  return $element;
}

/**
 * The #value_callback for a media_recorder type element.
 *
 * @see media_recorder_element_info()
 */
function media_recorder_element_value(&$element, $input = FALSE, $form_state = NULL) {
  $fid = 0;

  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Process any input and attach files.
  if ($input !== FALSE) {
    $return = $input;

    // Check for #filefield_value_callback values.
    // Because FAPI does not allow multiple #value_callback values like it
    // does for #element_validate and #process, this fills the missing
    // functionality to allow File fields to be extended through FAPI.
    if (isset($element['#file_value_callbacks'])) {
      foreach ($element['#file_value_callbacks'] as $callback) {
        $callback($element, $input, $form_state);
      }
    }
    // Load file if the FID has changed to confirm it exists.
    if (isset($input['fid']) && $file = file_load($input['fid'])) {
      $fid = $file->fid;
    }
    elseif (isset($input['fallback']['fid']) && $file = file_load($input['fallback']['fid'])) {
      $fid = $file->fid;
    }
  }

  // If there is no input, set the default value.
  else {
    if ($element['#extended']) {
      $default_fid = isset($element['#default_value']['fid']) ? $element['#default_value']['fid'] : 0;
      $return = isset($element['#default_value']) ? $element['#default_value'] : array('fid' => 0);
    }
    else {
      $default_fid = isset($element['#default_value']) ? $element['#default_value'] : 0;
      $return = array('fid' => 0);
    }

    // Confirm that the file exists when used as a default value.
    if ($default_fid && $file = file_load($default_fid)) {
      $fid = $file->fid;
    }
  }

  $return['fid'] = $fid;

  return $return;
}

/**
 * Validate media_recorder form elements.
 *
 * @see media_recorder_element_info()
 */
function media_recorder_element_validate(&$element, &$form_state) {
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : $element['#value']['fallback']['fid'];

  // Check required property based on the FID.
  if ($element['#required'] && empty($fid)) {
    form_error($element, t('%name is a required field.', array('%name' => $element['#title'])));
  }

  if (!empty($fid) && $file = file_load($fid)) {
    $file_validate_errors = file_validate($file, $element['#upload_validators']);
    if ($file_validate_errors) {
      form_error($element, implode('<br />', $file_validate_errors));
    }
  }
}

/**
 * Provides a form for adding media items using the media recorder.
 */
function media_recorder_add($form, &$form_state, $types = array(), $multiselect = FALSE, $media_browser = FALSE) {

  // Add media recorder element.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
  );

  // Add media recorder element.
  $form['media_recorder'] = element_info('media_recorder');
  $form['media_recorder'] += array(
    '#title' => t('Record'),
    '#required' => TRUE,
  );

  // Use ajax submit handler if this is the media browser.
  if ($media_browser) {
    $form['#prefix'] = '<div id="media-recorder-ajax-wrapper">';
    $form['#suffix'] = '</div>';
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Recording'),
      '#ajax' => array(
        'callback' => 'media_recorder_add_submit_ajax_callback',
      ),
      '#submit' => array('media_recorder_add_submit'),
    );
  }

  // Otherwise use regular submit handler.
  else {
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Recording'),
      '#submit' => array('media_recorder_add_submit'),
    );
  }

  return $form;
}

/**
 * Submit handler for media_recorder_add form.
 *
 * @see media_recorder_add()
 */
function media_recorder_add_submit($form, &$form_state) {

  // Process file.
  if (is_numeric($form_state['values']['media_recorder']['fid']) && $file = file_load($form_state['values']['media_recorder']['fid'])) {
    if (file_prepare_directory($form['media_recorder']['#upload_location'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $file->filename = trim($form_state['values']['title']);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      drupal_set_message(t('The file <em>!filename</em> was successfully saved.', array('!filename' => l(check_plain($file->filename), 'file/' . $file->fid))), 'status');
    }
  }

  // Otherwise return an error.
  else {
    drupal_set_message(t('An unrecoverable error occurred. Try reloading the page and submitting again.'), 'error');
  }
  return $form;
}

/**
 * Ajax submit handler for media_recorder_add form.
 *
 * @see media_recorder_add()
 */
function media_recorder_add_submit_ajax_callback(&$form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#media-recorder-ajax-wrapper form', drupal_render($form));
  if ($form_state['executed']) {
    $script = '<script>Drupal.media.browser.selectMedia([{fid:jQuery("#" + Drupal.settings.mediaRecorder.elements[0].id + "-fid").val()}]);Drupal.media.browser.submit();</script>';
    $commands[] = ajax_command_append('#media-recorder-ajax-wrapper', $script);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_field_widget_info().
 */
function media_recorder_field_widget_info() {
  return array(
    'media_recorder' => array(
      'label' => t('Media Recorder'),
      'field types' => array('file'),
      'settings' => array(
        'time_limit' => 300,
        'constraints' => array(
          'audio' => TRUE,
          'video' => TRUE,
          'video_resolution' => 320,
        ),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function media_recorder_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['time_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Time Limit'),
    '#description' => t('Time limit in seconds. Defaults to 300 seconds (5 minutes).'),
    '#default_value' => $settings['time_limit'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
  $form['constraints'] = array(
    '#type' => 'fieldset',
    '#title' => t('Media Constraints'),
    '#description' => t('Select which recording options will be available.'),
  );
  $form['constraints']['audio'] = array(
    '#type' => 'checkbox',
    '#title' => t('Audio'),
    '#default_value' => $settings['constraints']['audio'],
  );
  $form['constraints']['video'] = array(
    '#type' => 'checkbox',
    '#title' => t('Video'),
    '#default_value' => $settings['constraints']['video'],
  );
  $form['constraints']['video_resolution'] = array(
    '#type' => 'radios',
    '#title' => t('Video Resolution'),
    '#default_value' => $settings['constraints']['video_resolution'],
    '#options' => array(
      640 => t('640 x 480'),
      480 => t('480 x 360'),
      320 => t('320 x 240'),
      240 => t('240 x 180'),
      180 => t('180 x 135'),
    ),
  );

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function media_recorder_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#instance']['widget']['type'] === 'media_recorder') {
    $form['instance']['settings']['file_extensions']['#element_validate'][] = '_media_recorder_extensions';
    $form['instance']['settings']['file_extensions']['#description'] .= '<br />NOTE: The media recorder widget requires that wav, ogg, and webm are present as allowed extensions. Please make sure they are set correctly here. You may also want other extensions for mobile device, such as mov.';
  }
}

/**
 * Validates that the file_extensions setting includes media recorder formats.
 *
 * @see media_recorder_form_field_ui_field_edit_form_alter()
 */
function _media_recorder_extensions($element, &$form_state) {
  if (!empty($element['#value'])) {
    $extensions = preg_replace('/([, ]+\.?)/', ' ', trim(strtolower($element['#value'])));
    $extensions = array_filter(explode(' ', $extensions));
    if (!in_array('wav', $extensions) || !in_array('ogg', $extensions) || !in_array('webm', $extensions)) {
      form_error($element, t('The list of allowed extensions is not valid, be sure to include wav, ogg, and webm formats. <br />These are the current default media recorder allowed extensions: @extensions', array('@extensions' => variable_get('media_recorder_default_allowed_extensions', 'wav mp3 m4a ogg oga weba wma mov mp4 wmv m4v mpeg avi ogv webp webm'))));
    }
  }
}

/**
 * Implements hook_field_widget_form().
 */
function media_recorder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $defaults = array(
    'fid' => 0,
    'display' => !empty($field['settings']['display_default']),
    'description' => '',
  );

  // Load the items for form rebuilds from the field state as they might not be
  // in $form_state['values'] because of validation limitations. Also, they are
  // only passed in as $items when editing existing entities.
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
  }

  $element_info = element_info('media_recorder');
  $element += array(
    '#type' => 'media_recorder',
    '#value_callback' => 'media_recorder_widget_value',
    '#process' => array_merge($element_info['#process'], array('media_recorder_widget_process')),
    '#time_limit' => $instance['widget']['settings']['time_limit'],
    '#constraints' => $instance['widget']['settings']['constraints'],
    '#extended' => TRUE,
    '#upload_location' => file_field_widget_uri($field, $instance),
    '#upload_validators' => file_field_widget_upload_validators($field, $instance),
  );

  $element['#default_value'] = !empty($items) ? $items[0] : $defaults;
  if (empty($element['#default_value']['fid'])) {
    $element['#description'] = theme('media_upload_help', array('description' => $element['#description']));
  }
  $elements = array($element);

  return $elements;
}

/**
 * An element #process callback for the media_recorder field type.
 *
 * @see media_recorder_field_widget_form()
 */
function media_recorder_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];

  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  // Add the display field if enabled.
  if (!empty($field['settings']['display_field'])) {
    $element['display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include file in display'),
      '#value' => isset($item['display']) ? $item['display'] : $field['settings']['display_default'],
      '#attributes' => array('class' => array('file-display')),
    );
  }
  else {
    $element['display'] = array(
      '#type' => 'hidden',
      '#value' => '1',
    );
  }

  // Add the description field if enabled.
  if (!empty($instance['settings']['description_field'])) {
    $element['description'] = array(
      '#type' => variable_get('file_description_type', 'textfield'),
      '#title' => t('Description'),
      '#value' => isset($item['description']) ? $item['description'] : '',
      '#maxlength' => variable_get('file_description_length', 128),
      '#description' => t('The description may be used as the label of the link to the file.'),
    );
  }

  return $element;
}

/**
 * The #value_callback for the media_recorder element.
 *
 * @see media_recorder_field_widget_form()
 */
function media_recorder_widget_value($element, $input = FALSE, $form_state) {
  if ($input) {
    // Checkboxes lose their value when empty.
    // If the display field is present make sure its unchecked value is saved.
    $field = field_widget_field($element, $form_state);
    if (empty($input['display'])) {
      $input['display'] = $field['settings']['display_field'] ? 0 : 1;
    }
  }

  // We depend on the media_recorder element to handle uploads.
  $return = media_recorder_element_value($element, $input, $form_state);

  // Ensure that all the required properties are returned even if empty.
  $return += array(
    'fid' => 0,
    'display' => 1,
    'description' => '',
  );

  return $return;
}

function media_recorder_form_alter(&$form, &$form_state, $form_id) {
    $form['actions']['submit']['#value'] = 'Submit';
}

